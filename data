// MS para san jose

// ST para chilac

MYSQL_DATABASE;
railway;

MYSQL_PUBLIC_URL;
//root:rEpScLdXNWEjyyRfFscRVqQLJWGGVfjA@autorack.proxy.rlwy.net:44934/railway

mysql: MYSQL_ROOT_PASSWORD;
rEpScLdXNWEjyyRfFscRVqQLJWGGVfjA;

MYSQL_URL;
//root:rEpScLdXNWEjyyRfFscRVqQLJWGGVfjA@mysql.railway.internal:3306/railway

mysql: MYSQLDATABASE;
railway;

MYSQLHOST;
mysql.railway.internal;

MYSQLPASSWORD;
rEpScLdXNWEjyyRfFscRVqQLJWGGVfjA;

MYSQLPORT;
3306;

MYSQLUSER;
root;

DB_HOST = mysql.railway.internal;
DB_PORT = 3306;
DB_USER = root;
DB_PASSWORD = rEpScLdXNWEjyyRfFscRVqQLJWGGVfjA;
DB_NAME = railway;



import { useNavigation } from "@react-navigation/native";
import React from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Button,
  Alert,
} from "react-native";
import axios from "../../api/axios";
import { formatearMonto } from "../../components/global/dinero";
import RNHTMLtoPDF from "react-native-html-to-pdf";
import Share from "react-native-share";

export default function DetallesCorte({ route }) {
  const { corte, tipo } = route.params;
  const navigation = useNavigation();

  // Función para eliminar el corte
  const handleEliminarCorte = async () => {
    Alert.alert(
      "Confirmar Eliminación",
      "¿Estás seguro de que deseas eliminar este corte?",
      [
        { text: "Cancelar", style: "cancel" },
        {
          text: "Eliminar",
          onPress: async () => {
            try {
              const url =
                tipo === "diario"
                  ? `/cortes/diario/${corte.id}`
                  : `/cortes/semanal/${corte.id}`;

              await axios.delete(url);
              navigation.goBack();
            } catch (error) {
              Alert.alert("Error", "Error al eliminar el corte");
              console.error("Error al eliminar el corte:", error);
            }
          },
        },
      ]
    );
  };

  // Función para generar el PDF
  const generarPDF = async () => {
    let contenidoHTML = `
      <h1>Detalles del Corte ${tipo === "diario" ? "Diario" : "Semanal"}</h1>
      <h2>Información General</h2>
    `;

    if (tipo === "diario") {
      contenidoHTML += `
        <p><b>Fecha:</b> ${corte.fecha}</p>
        <p><b>Cobranza Total:</b> ${formatearMonto(corte.cobranza_total)}</p>
        <p><b>Primeros Pagos (Monto):</b> ${formatearMonto(
          corte.primeros_pagos_montos
        )}</p>
        <p><b>Clientes Cobrados:</b> ${corte.deudores_cobrados}</p>
        <p><b>Liquidaciones Totales:</b> ${formatearMonto(
          corte.liquidaciones_total
        )}</p>
        <p><b>Clientes Liquidados:</b> ${corte.deudores_liquidados}</p>
        <p><b>No Pagos Totales:</b> ${corte.no_pagos_total}</p>
        <p><b>Créditos Totales:</b> ${corte.creditos_total}</p>
        <p><b>Créditos (Monto Total):</b> ${formatearMonto(
          corte.creditos_total_monto
        )}</p>
        <p><b>Primeros Pagos (Total):</b> ${parseFloat(
          corte.primeros_pagos_total
        )}</p>
        <p><b>Nuevos Clientes:</b> ${corte.nuevos_deudores}</p>
        <p><b>Clientes Totales:</b> ${corte.deudores_totales}</p>
      `;
    } else {
      contenidoHTML += `
        <p><b>Fecha Inicio:</b> ${new Date(
          corte.fecha_inicio
        ).toLocaleDateString()}</p>
        <p><b>Fecha Fin:</b> ${new Date(
          corte.fecha_fin
        ).toLocaleDateString()}</p>
        <p><b>Clientes Cobrados:</b> ${corte.deudores_cobrados}</p>
        <p><b>Cobranza Total:</b> ${formatearMonto(corte.cobranza_total)}</p>
        <p><b>Nuevos Clientes:</b> ${corte.nuevos_deudores}</p>
        <p><b>Creditos Total Monto:</b> ${formatearMonto(
          corte.creditos_total_monto
        )}</p>
        <p><b>Primeros Pagos Monto:</b> ${formatearMonto(
          corte.primeros_pagos_Monto
        )}</p>
        <p><b>Liquidaciones Total Monto:</b> ${formatearMonto(
          corte.liquidaciones_total
        )}</p>
        <p><b>Creditos total:</b> ${corte.creditos_total}</p>
        <p><b>Primeros pagos total:</b> ${parseFloat(
          corte.primeros_pagos_total
        )}</p>
        <p><b>No pagos total:</b> ${corte.no_pagos_total}</p>
        <p><b>Comisión por Cobro:</b> ${formatearMonto(
          corte.comision_cobro
        )}</p>
        <p><b>Comision ventas:</b> ${formatearMonto(corte.comision_ventas)}</p>
        <p><b>Gastos:</b> ${formatearMonto(corte.gastos)}</p>
        <p><b>Saldo Final:</b> ${formatearMonto(corte.saldo_final)}</p>
        <p><b>Total Ingreso:</b> ${formatearMonto(corte.total_ingreso)}</p>
        <p><b>Total Gastos:</b> ${formatearMonto(corte.total_gasto)}</p>
        <p><b>Total Agente:</b> ${formatearMonto(corte.total_agente)}</p>
      `;
    }

    // Configuración del PDF
    const options = {
      html: contenidoHTML,
      fileName: `Corte_${tipo}_${corte.id}`,
      directory: "Documents",
    };

    try {
      const file = await RNHTMLtoPDF.convert(options);
      await Share.open({ url: `file://${file.filePath}` });
    } catch (error) {
      console.error("Error al generar PDF:", error);
      Alert.alert("Error", "No se pudo generar el PDF.");
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>
        Detalles del Corte {tipo === "diario" ? "Diario" : "Semanal"}
      </Text>

      <View style={styles.card}>
        <Text style={styles.sectionTitle}>Información General</Text>
        {tipo === "diario" ? (
          <>
            <Detail label="Fecha:" value={corte.fecha} />
            <Detail
              label="Cobranza Total:"
              value={`${formatearMonto(corte.cobranza_total)}`}
            />
            <Detail
              label="Primeros Pagos (Monto):"
              value={`${formatearMonto(corte.primeros_pagos_montos)}`}
            />
            <Detail
              label="Clientes Cobrados:"
              value={corte.deudores_cobrados}
            />
            <Detail
              label="Liquidaciones Totales:"
              value={`${formatearMonto(corte.liquidaciones_total)}`}
            />
            <Detail
              label="Clientes Liquidados:"
              value={corte.deudores_liquidados}
            />
            <Detail label="No Pagos Totales:" value={corte.no_pagos_total} />
            <Detail label="Créditos Totales:" value={corte.creditos_total} />
            <Detail
              label="Créditos (Monto Total):"
              value={`${formatearMonto(corte.creditos_total_monto)}`}
            />
            <Detail
              label="Primeros Pagos (Total):"
              value={parseFloat(corte.primeros_pagos_total)}
            />
            <Detail label="Nuevos Clientes:" value={corte.nuevos_deudores} />
            <Detail label="Clientes Totales:" value={corte.deudores_totales} />
          </>
        ) : (
          <>
            <Detail
              label="Fecha Inicio:"
              value={new Date(corte.fecha_inicio).toLocaleDateString()}
            />
            <Detail
              label="Fecha Fin:"
              value={new Date(corte.fecha_fin).toLocaleDateString()}
            />
            <Detail
              label="Clientes Cobrados:"
              value={corte.deudores_cobrados}
            />
            <Detail
              label="Cobranza Total:"
              value={`${formatearMonto(corte.cobranza_total)}`}
            />
            <Detail
              label="Nuevos Clientes:"
              value={`${corte.nuevos_deudores}`}
            />
            <Detail
              label="Creditos Total Monto:"
              value={`${formatearMonto(corte.creditos_total_monto)}`}
            />
            <Detail
              label="Primeros Pagos Monto:"
              value={`${formatearMonto(corte.primeros_pagos_Monto)}`}
            />
            <Detail
              label="Liquidaciones Total Monto:"
              value={`${formatearMonto(corte.liquidaciones_total)}`}
            />
            <Detail label="Creditos total:" value={`${corte.creditos_total}`} />
            <Detail
              label="Primeros pagos total:"
              value={`${parseFloat(corte.primeros_pagos_total)}`}
            />
            <Detail label="No pagos total:" value={`${corte.no_pagos_total}`} />
            <Detail
              label="Comisión por Cobro:"
              value={`${formatearMonto(corte.comision_cobro)}`}
            />
            <Detail
              label="Comision ventas:"
              value={`${formatearMonto(corte.comision_ventas)}`}
            />
            <Detail label="Gastos:" value={`${formatearMonto(corte.gastos)}`} />
            <Detail
              label="Saldo Final:"
              value={`${formatearMonto(corte.saldo_final)}`}
            />
            <Detail
              label="Total Ingreso:"
              value={`${formatearMonto(corte.total_ingreso)}`}
            />
            <Detail
              label="Total Gastos:"
              value={`${formatearMonto(corte.total_gasto)}`}
            />
            <Detail
              label="Total Agente:"
              value={`${formatearMonto(corte.total_agente)}`}
            />
          </>
        )}
        <View
          style={{
            marginHorizontal: 10,
            marginVertical: 10,
          }}
        >
          <Button title="Eliminar corte" onPress={handleEliminarCorte} />
        </View>
      </View>
    </ScrollView>
  );
}

const Detail = ({ label, value }) => (
  <View style={styles.detailRow}>
    <Text style={styles.label}>{label}</Text>
    <Text style={styles.value}>{value}</Text>
  </View>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f7f7f7",
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 20,
    color: "#333",
  },
  card: {
    backgroundColor: "#fff",
    borderRadius: 10,
    padding: 15,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#555",
    marginBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
    paddingBottom: 5,
  },
  detailRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginVertical: 8,
  },
  label: {
    fontSize: 17,
    color: "#555",
    fontWeight: "800",
  },
  value: {
    fontSize: 16,
    color: "#333",
    fontWeight: "400",
  },
});
